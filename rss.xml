<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1697388841986104302</id><updated>2020-08-11T07:37:19.714-05:00</updated><category term="agile"/><category term="TDD"/><category term="test-driven development"/><category term="xp"/><category term="tim ottinger"/><category term="coaching"/><category term="index cards"/><category term="agile practives"/><category term="ottinger"/><category term="unit testing"/><category term="clean code"/><category term="project management"/><category term="refactoring"/><category term="TAD"/><category term="collaboration"/><category term="effective"/><category term="plain old unit testing"/><category term="agile testing"/><category term="pairing"/><category term="pragmatism"/><category term="software development"/><category term="test-after development"/><category term="agile values"/><category term="design principles"/><category term="mocks"/><category term="pair programming"/><category term="programming"/><category term="scrum"/><category term="simplicity"/><category term="Agile Estimating and Planning"/><category term="POUT"/><category term="abstraction"/><category term="agile failure"/><category term="agile in a flash"/><category term="agile manifesto"/><category term="attitudes"/><category term="coding standards"/><category term="collective code ownership"/><category term="coupling"/><category term="extreme programming"/><category term="jeff langr"/><category term="lean"/><category term="lean software development"/><category term="meaningful names"/><category term="principles"/><category term="reference"/><category term="retrospective"/><category term="simple design"/><category term="smells"/><category term="stories"/><category term="story"/><category term="testing"/><category term="variable names"/><category term="waste"/><category term="BVC"/><category term="W Edgars Deming"/><category term="agile adoption"/><category term="backlog"/><category term="big visible chart"/><category term="cards"/><category term="characterization tests"/><category term="coach"/><category term="cohesion"/><category term="conflicts"/><category term="contest"/><category term="cooperation"/><category term="information"/><category term="iteration"/><category term="langr"/><category term="laws"/><category term="lean production"/><category term="metrics"/><category term="optimization"/><category term="pragmatic bookshelf"/><category term="quality"/><category term="refactor the team"/><category term="shu-ha-ri"/><category term="software"/><category term="splitting stories"/><category term="teams"/><category term="technical debt"/><category term="transparency"/><category term="user stories"/><category term="whole team"/><category term="FIRST"/><category term="Kent Beck"/><category term="Mike Cohn"/><category term="TPS"/><category term="TQA"/><category term="Toyota Production System"/><category term="Uncle Bob"/><category term="Weinberg"/><category term="abbreviations"/><category term="acceptance tests"/><category term="arguments"/><category term="automation"/><category term="brief"/><category term="builds"/><category term="burndown"/><category term="card wall"/><category term="card-carrying"/><category term="cardinality"/><category term="certification"/><category term="chickens"/><category term="clear"/><category term="code smells"/><category term="code virtues"/><category term="comments"/><category term="community"/><category term="computer science"/><category term="consulting"/><category term="context"/><category term="courage"/><category term="craftsman"/><category term="craftsmeanship"/><category term="customer"/><category term="daily standup meetings"/><category term="design rot"/><category term="developed"/><category term="discipline"/><category term="distributed"/><category term="duplication"/><category term="easy"/><category term="energy"/><category term="equality"/><category term="estimation"/><category term="ethics"/><category term="expressiveness"/><category term="fakes"/><category term="free"/><category term="function names"/><category term="graphs"/><category term="green"/><category term="hours"/><category term="humanity"/><category term="incrementalism"/><category term="inferiority"/><category term="infinitest"/><category term="inspection"/><category term="insufficient miracle"/><category term="interview"/><category term="invest"/><category term="isolation"/><category term="leadership"/><category term="learn"/><category term="legacy code"/><category term="level setting"/><category term="lone ranger"/><category term="managers"/><category term="many"/><category term="mchenry"/><category term="michael feathers"/><category term="mob programming"/><category term="mobbing"/><category term="mobster"/><category term="mocking"/><category term="motivation"/><category term="objections"/><category term="objections to agile"/><category term="oblique strategies"/><category term="offshoring"/><category term="old dog"/><category term="one"/><category term="one reason to fail"/><category term="outsourcing"/><category term="packages"/><category term="pair"/><category term="performance"/><category term="personal bubble"/><category term="pigs"/><category term="planning poker"/><category term="poetry"/><category term="points"/><category term="polymorphism"/><category term="poppendieck"/><category term="practice"/><category term="pragprog"/><category term="process smell"/><category term="professional"/><category term="qa"/><category term="qualities of good code"/><category term="red-green-refactor"/><category term="release"/><category term="remote"/><category term="roles"/><category term="sale"/><category term="seven code virtues"/><category term="simple"/><category term="single responsibility principle"/><category term="skills"/><category term="solid"/><category term="spies"/><category term="spike"/><category term="sprint"/><category term="sprout class"/><category term="sprout method"/><category term="stand-ups"/><category term="standards"/><category term="standups"/><category term="story cards"/><category term="story format"/><category term="strong-style pairing"/><category term="style guide"/><category term="superiority"/><category term="test abstraction"/><category term="test double"/><category term="test doubles"/><category term="test-driven"/><category term="tools"/><category term="transition"/><category term="unique"/><category term="unit tests"/><category term="value stream"/><category term="variable scope"/><category term="volatility"/><category term="working"/><category term="yagni"/><category term="zero"/><category term="zero sum"/><title type='text'>Agile in a Flash</title><subtitle type='html'>&lt;a href=&quot;http://agileotter.blogspot.com&quot;&gt;Tim Ottinger&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://langrsoft.com&quot;&gt;Jeff Langr&lt;/a&gt; present the blog behind the versatile &lt;br&gt; &lt;a href=&quot;http://www.pragprog.com/titles/olag/agile-in-a-flash&quot;&gt;Pragmatic Programmers&lt;/a&gt; reference cards.</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default?start-index=26&amp;max-results=25'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>148</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-3416367149545979183</id><published>2020-01-15T09:49:00.000-06:00</published><updated>2020-01-15T13:24:57.409-06:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="big visible chart"/><category scheme="http://www.blogger.com/atom/ns#" term="BVC"/><category scheme="http://www.blogger.com/atom/ns#" term="coaching"/><category scheme="http://www.blogger.com/atom/ns#" term="collaboration"/><category scheme="http://www.blogger.com/atom/ns#" term="mob programming"/><category scheme="http://www.blogger.com/atom/ns#" term="mobbing"/><category scheme="http://www.blogger.com/atom/ns#" term="mobster"/><category scheme="http://www.blogger.com/atom/ns#" term="programming"/><category scheme="http://www.blogger.com/atom/ns#" term="strong-style pairing"/><title type='text'>Feel Like You&#39;ve PARTIED With Mobbing</title><content type='html'>&lt;h4&gt;&lt;i&gt;A new AIAF post by Tim Ottinger / Jeff Langr.&lt;/i&gt;&lt;/h4&gt;Mob programming sounds like a chaotic way of developing software: Get everyone into a room with a computer, let them have at it, and hope for the best.&lt;br /&gt;&lt;p&gt;Perhaps you’ve read enough about mobbing to know that there is one computer, that one person at a time operates that computer’s keyboard and mouse, and that everyone else looks at the screen and makes suggestions. You know that there are two primary roles--the person operating the keyboard (the driver) and the people deciding what to do next (the navigators). You know that you shouldn’t have the same person driving all the time.&lt;/p&gt;&lt;p&gt;Often teams do great with no more than that brief paragraph of guidance. Congratulations! We can assume you now know the key mechanics of mobbing.&lt;/p&gt;&lt;p&gt;However, some mob programming sessions run into problems, and some don’t produce as much value as you’d like in return for the many person-hours you’ve invested. To generate as much value as possible when mobbing, follow our core set of guidelines. You might even feel like you’ve PARTIED:&lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-zrDhbKBwceU/Xh9KDf1BEhI/AAAAAAAAGOU/3Fwdd09uhrwHE7Z-YakJt74ztiHYMyU6QCLcBGAsYHQ/s1600/mob.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;954&quot; data-original-width=&quot;1600&quot; height=&quot;190&quot; src=&quot;https://1.bp.blogspot.com/-zrDhbKBwceU/Xh9KDf1BEhI/AAAAAAAAGOU/3Fwdd09uhrwHE7Z-YakJt74ztiHYMyU6QCLcBGAsYHQ/s320/mob.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3&gt;P: Pay down promise debt&lt;/h3&gt;&lt;p&gt;Programming requires a lot of attention to detail. It can be a struggle to keep the big picture in mind while dealing with software architecture, various libraries, detailed requirements, and language minutiae.&lt;/p&gt;&lt;p&gt;As you and your mob make small changes in various places in the code to implement a feature, you can’t help but notice neighboring code that’s less than ideal. Maybe it exhibits a code smell or a potential defect. Maybe you suspect a security issue and need to check it out more fully.&lt;/p&gt;&lt;p&gt;How should you handle such a “distraction,” one of countless that will arise during a typical mobbing session?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If you ignore it, you may release code that is poorly designed, reads poorly, or that has defects.&lt;/li&gt;&lt;li&gt;If you work on it now, you may lose context in the work you’re trying to accomplish.&lt;/li&gt;&lt;li&gt;If you try to remember it, you may forget because you’re so focused on the job at hand.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So you make a note of the concern as a piece of promise debt. Your promise debt list means you won’t have to worry about forgetting. You can avoid the distraction for now, and tackle it next time you come up for air or when you finish the current task.&lt;/p&gt;&lt;p&gt;We call this “promise debt” for a reason: The list consists of obligations you’ll want to pay off by the end of the mob session. Don’t pretend you’re done if you haven’t addressed all the concerns on the list one way or another.&lt;/p&gt;&lt;p&gt;By paying off promise debt, you honor the time your team invested in making the list, and you demonstrate respect for the code everyone works on. Your honor shows your dedication and discipline in managing the codebase. The attention helps you uncover weaknesses in the current design before they become defects.&lt;/p&gt;&lt;h3&gt;A: Argue in code&lt;/h3&gt;&lt;p&gt;When people talk about code in abstract terms, they often take on conflicting stances. “If we focus too much on readability,” one says, “we will sacrifice performance!” Another says, “if we make small objects, it will restrict our ability to use the values contained in them too much!”&lt;/p&gt;&lt;p&gt;As long as the topic is abstract and general, it is hard to come to any real understanding of what is “universally best,” since making trade-offs is context-specific. This is a core problem with abstract ideas in practical places: Our problems won’t be resolved in the abstract.&lt;/p&gt;&lt;p&gt;By creating an example in the code instead, and expressing it with a specific design and implementation, you shift the discussion from abstract to concrete. You focus on this code, in this case. Once the concept materializes into a real, readable thing on your monitors, you can make context-aware decisions. It’s a lot easier to reason about code you can see.&lt;/p&gt;&lt;p&gt;It’s okay to argue (well, “deliberate” is what we like to call it) for a few minutes. But you must agree upon specific cases if you want to make any real progress. The best specific case for you to work on is the one you’re currently on the hook to deliver.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Allow no more than 5-10 minutes to deliberate in the abstract. Then go to the code for an answer. This prevents a lot of conversation from being wasted, keeps us focused on our work, and drives us to make agreements quickly.&amp;nbsp;&lt;/p&gt;&lt;h3&gt;R: Rotate regularly and rapidly&lt;/h3&gt;&lt;p&gt;The most common rookie mistake is not switching drivers often enough. When we walk in on teams trying mobbing on their own, we often see the anti-pattern of the stagnant driver: One developer, typically the team lead, commands the driver chair for an hour and more. Why? Because they’re the most senior person on the team, and seemingly things will go faster if they do all the work. Meanwhile everyone else sits back and supposedly soaks up the learning.&lt;/p&gt;&lt;p&gt;We’ll be blunt: Stagnant drivers usually turn mobbing into a snoozefest. We tend to refer to this pattern as the “worker / rester” pattern, or when it’s not quite as awful we may call it “worker / watcher.”&amp;nbsp;&lt;/p&gt;&lt;p&gt;Instead, make the session lively and keep everyone engaged by rapidly rotating. A five-minute rotation seems nuts--what can one person possibly accomplish in five minutes? You’ll find out, however, that short rotations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Keep everyone engaged and focused on the task at hand&lt;/li&gt;&lt;li&gt;Avoid dominance by the senior devs&lt;/li&gt;&lt;li&gt;Minimize the sweat-factor of being in the hot seat&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Driver sessions of 5-10 minutes seem perfectly in line with our recommendation for deliberation limits.&lt;/p&gt;&lt;p&gt;Rapid rotations are a must for successful mob-programming! Download Mobster now and use it.&lt;/p&gt;&lt;h3&gt; T: Track waste and other learnings&amp;nbsp;&lt;/h3&gt;&lt;p&gt;When asked “what is mob programming good for?,” most people will list shared learning as the primary benefit.&lt;/p&gt;&lt;p&gt;How do they know? Are we sure that teams are learning, sharing, and participating together when mob programming?&lt;/p&gt;&lt;p&gt;Agile teams have long used Big Visible Charts (BVCs) for making their work visible and transparent to anyone who visits the team space. When mob programming, we will often track our daily learnings or questions on a flip chart.&lt;/p&gt;&lt;p&gt;This has a number of advantages:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When someone records an item, you are aware that learning has happened.&lt;/li&gt;&lt;li&gt;You can count items on the chart as evidence of the efficacy of mob programming.&lt;/li&gt;&lt;li&gt;You can bring charts to the retrospective and reflect on knowledge acquired and problems solved.&lt;/li&gt;&lt;li&gt;You’ll have reminders of tricks you learned yesterday or the day before, easily and eventually forgotten otherwise.&lt;/li&gt;&lt;li&gt;People not present when the learning took place can review the new additions and ask questions.&lt;/li&gt;&lt;li&gt;When problems are listed on the BVC, their presence will prompt you to solve them.&lt;/li&gt;&lt;li&gt;Sometimes you become aware of blind spots or knowledge deficiencies, and are reminded by the chart to put some time into research.&lt;/li&gt;&lt;li&gt;You can visit teams that similarly radiate their learnings in order to glean new ideas. This can spice up community-of-practice meetings (guilds, scrum-of-scrums, etc).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Tracking knowledge acquisition isn’t a universal practice for mob-programming teams, but we’ve found it so helpful that we recommend it for all teams, especially those new to the practice.&lt;/p&gt;&lt;h3&gt;I: Intermittent breaks&lt;/h3&gt;&lt;p&gt;When things aren’t going well in a mob programming session (yes, it will happen), sometimes the best thing you can do is get up and walk away for ten minutes (or even better--walk for ten minutes, perhaps around the building). Sometimes the best thing is for the whole team to stand up and disperse. Clear heads will often return a better solution to the mob.&lt;/p&gt;&lt;p&gt;When things are going well in a mob programming session, it’s easy to press each other to keep going. We’ve been in mob sessions that might have lasted all day without a break if we didn’t insist on one.&lt;/p&gt;&lt;p&gt;Humans need breaks, and they work better with them. Feeling sleepy, distracted, sluggish, frustrated, stupid?&lt;/p&gt;&lt;p&gt;Get up and take a short walk from time to time. Don’t worry, the mob will survive in your absence!&amp;nbsp;&lt;/p&gt;&lt;p&gt;Alternatively, take regular whole-mob breaks at least once every 90 minutes, and don’t let your teammates talk you out of them (trust us, it’s easy to do). Mobster will help force the issue.&lt;/p&gt;&lt;h3&gt;E: Express intent&lt;/h3&gt;&lt;p&gt;The goal of a navigator is to provide direction and guidance, not to micromanage: “Turn left here; now put your foot on the gas. Brake! OK, ease out slowly…” Or, “Put your cursor here, now right-click, pick the third option. Okay, now click here. Now go to the other file, and click here. Right-click, I mean. Yeah, now pick the middle option, then type OJK… select the third word.”&lt;/p&gt;&lt;p&gt;Back-seat drivers frustrate everyone--driver and rest of the mob included. Rote directions are hard to follow. The driver and others in the mob find it impossible to correct or interject any ideas because they’re completely caught up in trying to figure out what the hell you’re asking the driver to do.&lt;/p&gt;&lt;p&gt;Instead, provide direction. “Let’s create a test that verifies the system rejects adding duplicate requests.” The driver can ask for guidance on specifics as needed.&lt;/p&gt;&lt;p&gt;Yes, at times the driver will need to ask for precise steps. Consider this driver’s ed, something that all drivers will experience intermittently. We want everyone to improve, so listen and learn to ingrain the new bits of learning that will come frequently. Mob nirvana is when we’ve learned to minimize detailed directions and focus instead on relating end goals.&lt;/p&gt;&lt;p&gt;If mob programming is (in Josh Kerievsky’s words) a continuous integration of ideas, then expressing actions rather than intent is the primitive obsession of mob-programming.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Don’t leave your partners guessing.&lt;/p&gt;&lt;h3&gt;D: Driver doesn&#39;t navigate&lt;/h3&gt;&lt;p&gt;The other most common mob-programming anti-pattern (along with stagnant drivers) is dominant drivers--people who “run away” with the code while at the keyboard. A heads-down driver choosing where to go and how to get there is going to bore the tears out of the mob--they’ll eventually fall asleep (sometimes literally) in the back seat.&amp;nbsp;&lt;/p&gt;&lt;p&gt;More importantly, the mob will learn little from the driver and the driver will learn nothing from the mob.&lt;/p&gt;&lt;p&gt;To prevent runaway drivers, follow the rule of strong-style pairing: The driver isn’t allowed to decide where to go next. Instead, the mob makes navigation choices and relays them to the driver. The driver’s job is to listen and translate these directions into code. A driver who wants to head in a different direction must relinquish the driver’s seat.&lt;/p&gt;&lt;p&gt;It’s not hard for drivers to get carried away and start to “run away,” but they’ll usually not take offense if you remind them of the rule. Often they’ll even admit their breach and ask if they should just revert.&lt;/p&gt;&lt;p&gt;Newbies (new programmers, new team members, people new to the system) of all stripes are naturally intimidated by the prospect of being in the hot seat. Strong-style pairing minimizes the fear factor: The newbie isn’t expected to know what to do, and the mob is always more than willing to help them shift into higher gears.&lt;/p&gt;&lt;p&gt;Not only does strong-style pairing improve the capabilities of everyone on the team, it helps them improve their ability to communicate ideas about code and design.&lt;/p&gt;&lt;p&gt;Despite the name, mobs aren’t free-for-alls. A mob session is best treated as a focused journey that you keep on course by following our tips.&lt;/p&gt;&lt;h4&gt;Sources&lt;/h4&gt;&lt;p&gt;Industrial Logic. “A Few Tips for Mob Programming,” https://www.industriallogic.com/blog/a-few-tips-for-mob-programming/&amp;nbsp;&lt;/p&gt;&lt;p&gt;Langr, Jeff. “Two Rules for MobbingSuccess,” http://www.ranorex.com/blog/two-rules-mobbing-success/&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/3416367149545979183/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2020/01/feel-like-youve-partied-with-mobbing.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/3416367149545979183'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/3416367149545979183'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2020/01/feel-like-youve-partied-with-mobbing.html' title='Feel Like You&#39;ve PARTIED With Mobbing'/><author><name>Jeff Langr</name><uri>http://www.blogger.com/profile/10499693020049210645</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-zrDhbKBwceU/Xh9KDf1BEhI/AAAAAAAAGOU/3Fwdd09uhrwHE7Z-YakJt74ztiHYMyU6QCLcBGAsYHQ/s72-c/mob.jpg" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-5989342415510286087</id><published>2016-08-16T21:20:00.001-05:00</published><updated>2016-08-16T21:20:23.107-05:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="plain old unit testing"/><category scheme="http://www.blogger.com/atom/ns#" term="TAD"/><category scheme="http://www.blogger.com/atom/ns#" term="TDD"/><category scheme="http://www.blogger.com/atom/ns#" term="unit testing"/><title type='text'>Why Test-After Coverage Is Lower</title><content type='html'>&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-j5Z-wxYm3SE/V7PHsgJZ-UI/AAAAAAAAFvg/acKdkwQjvEgFbhcU83-D3zcc5r-GPLKzgCLcB/s1600/card.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;200&quot; src=&quot;https://4.bp.blogspot.com/-j5Z-wxYm3SE/V7PHsgJZ-UI/AAAAAAAAFvg/acKdkwQjvEgFbhcU83-D3zcc5r-GPLKzgCLcB/s320/card.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Unit testing after the fact? We do just enough test-after development (TAD) to please our manager, and no more.&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Just Ship It!&lt;/b&gt;&amp;nbsp;Once the business realizes they have product in hand, there&#39;s always pressure to move on to the next feature. &lt;br /&gt;&lt;/div&gt;&lt;div&gt;Invariably, any &quot;after the fact&quot; process is given short shrift. This is why post-development code reviews don&#39;t reveal deep problems, and even if they do, we rarely go back and make the costly changes needed to truly fix the problems. This is why after-the-fact testers are always getting squeezed out of the narrow space between &quot;done&quot; software and delivery.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;My Sh*t Don&#39;t Stink&lt;/b&gt;. I just wrote my code, and it works. I know so because I deployed it, cranked up the server, and ran through the application to verify it. Why would I waste any more time building unit tests that I hope to never look at again?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;That Can&#39;t Possibly Break&lt;/b&gt;. Well, two-line methods and such. I can glance at those and think they look good. Lazy initialization? That couldn&#39;t break, could it?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;That&#39;s Gonna Be a Pain.&lt;/b&gt;&amp;nbsp;Holy crud, that&#39;s a 100-line method with 3+ levels of nesting, complex conditionals, and exceptional conditions (test those? you&#39;re kidding). It&#39;s going to take me longer to write a reasonably comprehensive set of tests than it took to write the method in the first place.&lt;br /&gt;&lt;br /&gt;Worse, the method has numerous private dependencies on code that makes database or service calls. Or just dependencies that have nothing to do with what I&#39;m testing. Just today I tried to instantiate a class, but failed because of a class two inheritance levels up with a dependency on another object being properly instantiated and configured. Figuring out how to test that is going to be a nightmare that eats up a lot of time.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Code written without immediate and constant consideration for how to unit test it is going to be a lot harder to test. Most of us punt when efforts become too daunting.&lt;/div&gt;&lt;div&gt;---&lt;/div&gt;&lt;div&gt;I hear that TAD coverage typically gets up to about 75% on average. Closer inspection reveals that this number is usually all over the map: 82% in one class, 38% in another, and so on. Even closer inspection reveals that classes with a coverage percent of, say, 38, often contain the riskiest (most complex) code. Why? Because they&#39;re the hardest to test.&lt;br /&gt;&lt;br /&gt;If I was allowed to only do TAD and not TDD, I&#39;d scrap it and invest more in end-to-end testing.&lt;br /&gt;&lt;br /&gt;-- Jeff&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/5989342415510286087/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2016/08/why-test-after-coverage-is-lower.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5989342415510286087'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5989342415510286087'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2016/08/why-test-after-coverage-is-lower.html' title='Why Test-After Coverage Is Lower'/><author><name>Jeff Langr</name><uri>http://www.blogger.com/profile/10499693020049210645</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-j5Z-wxYm3SE/V7PHsgJZ-UI/AAAAAAAAFvg/acKdkwQjvEgFbhcU83-D3zcc5r-GPLKzgCLcB/s72-c/card.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-5052177886397250735</id><published>2015-02-22T13:25:00.000-06:00</published><updated>2015-02-22T13:26:21.009-06:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="backlog"/><category scheme="http://www.blogger.com/atom/ns#" term="burndown"/><category scheme="http://www.blogger.com/atom/ns#" term="pair"/><category scheme="http://www.blogger.com/atom/ns#" term="pairing"/><category scheme="http://www.blogger.com/atom/ns#" term="points"/><category scheme="http://www.blogger.com/atom/ns#" term="scrum"/><category scheme="http://www.blogger.com/atom/ns#" term="spike"/><category scheme="http://www.blogger.com/atom/ns#" term="sprint"/><category scheme="http://www.blogger.com/atom/ns#" term="story"/><category scheme="http://www.blogger.com/atom/ns#" term="test-driven"/><category scheme="http://www.blogger.com/atom/ns#" term="value stream"/><category scheme="http://www.blogger.com/atom/ns#" term="xp"/><title type='text'>Top Ten Agile Dangers</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-ml0jbk1uq28/VOossztCvsI/AAAAAAAAFiQ/T_3VHyadnpA/s1600/card.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-ml0jbk1uq28/VOossztCvsI/AAAAAAAAFiQ/T_3VHyadnpA/s1600/card.png&quot; height=&quot;300&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/5052177886397250735/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2015/02/top-ten-agile-dangers.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5052177886397250735'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5052177886397250735'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2015/02/top-ten-agile-dangers.html' title='Top Ten Agile Dangers'/><author><name>Jeff Langr</name><uri>http://www.blogger.com/profile/10499693020049210645</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-ml0jbk1uq28/VOossztCvsI/AAAAAAAAFiQ/T_3VHyadnpA/s72-c/card.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-8307028532554434237</id><published>2013-01-14T11:05:00.002-06:00</published><updated>2013-01-14T11:07:05.548-06:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile in a flash"/><category scheme="http://www.blogger.com/atom/ns#" term="community"/><category scheme="http://www.blogger.com/atom/ns#" term="interview"/><category scheme="http://www.blogger.com/atom/ns#" term="mchenry"/><category scheme="http://www.blogger.com/atom/ns#" term="pairing"/><title type='text'>Interview with Tim</title><content type='html'>Tim had a nice &lt;a href=&quot;http://ugtastic.com/interviews/interview-in-a-flash&quot;&gt;mini-interview&lt;/a&gt;&amp;nbsp;with Michael Hall of&amp;nbsp;&lt;a href=&quot;http://ugtastic.com/&quot;&gt;UGTastic&lt;/a&gt;, who is also (as far as I&#39;m concerned) the public face of the &lt;a href=&quot;http://mchenry.softwarecraftsmanship.org/&quot;&gt;Software Craftsmen McHenry County&lt;/a&gt;&amp;nbsp;in the far north suburbs of Chicago, Il.&lt;br /&gt;&lt;br /&gt;There is a little discussion of Agile In A Flash in there. Enjoy.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/8307028532554434237/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2013/01/interview-with-tim.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/8307028532554434237'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/8307028532554434237'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2013/01/interview-with-tim.html' title='Interview with Tim'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-7191576436638221440</id><published>2013-01-13T14:47:00.001-06:00</published><updated>2013-01-13T14:47:27.792-06:00</updated><title type='text'>Continuous Improvement In A Flash</title><content type='html'>Jeff and I have been busy working independently.&lt;br /&gt;&lt;br /&gt;I borrowed the &quot;brand&quot; but &lt;a href=&quot;https://leanpub.com/smtb&quot;&gt;Continuous Improvement In A Flash&lt;/a&gt; is a whole different kind of work than Agile In A Flash. It is essentially a guide for scrum masters to help them institute continuous improvement. It is&amp;nbsp; a quick exposition of mindset and technique that should help any SM (even a part-time SM). &lt;br /&gt;&lt;br /&gt;I&#39;ve just made the first public release, and I hope to follow up with changes, expansions, and reductions as time allows.&lt;br /&gt;&lt;br /&gt;I am also starting up a second LeanPub book as the further development of my Use Vim Like A Pro tutorial, which has lost its place on the internet with the closing of my old blog on blogsome.&lt;br /&gt;&lt;br /&gt;We&#39;ll keep you up to date with further changes, such as the publication date of Jeff&#39;s new book, as time allows.</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/7191576436638221440/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2013/01/continuous-improvement-in-flash.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/7191576436638221440'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/7191576436638221440'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2013/01/continuous-improvement-in-flash.html' title='Continuous Improvement In A Flash'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-1411310108937935509</id><published>2012-07-03T10:22:00.000-05:00</published><updated>2012-07-03T10:42:54.035-05:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="red-green-refactor"/><category scheme="http://www.blogger.com/atom/ns#" term="TAD"/><category scheme="http://www.blogger.com/atom/ns#" term="TDD"/><category scheme="http://www.blogger.com/atom/ns#" term="test-after development"/><category scheme="http://www.blogger.com/atom/ns#" term="test-driven development"/><category scheme="http://www.blogger.com/atom/ns#" term="unit testing"/><category scheme="http://www.blogger.com/atom/ns#" term="unit tests"/><title type='text'>Premature Passes: Why You Might Be Getting Green on Red</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://langrsoft.com/ftp/greenonred.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://langrsoft.com/ftp/greenonred.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://agileinaflash.blogspot.com/2009/02/red-green-refactor.html&quot;&gt;Red, green, refactor.&lt;/a&gt;&amp;nbsp;The first step in the test-driven development (TDD) cycle is to ensure that your newly-written test fails &lt;i&gt;before&lt;/i&gt; you try to write the code to make it pass. But why expend the effort and waste the time to run the tests? If you&#39;re following TDD, you write each new test for code that doesn&#39;t yet exist, and so it shouldn&#39;t pass.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/_9kQQgQD35rY/SaV5p8YBGhI/AAAAAAAAAkg/HOvlhIo7yGI/s400/06_Red_Green_Refactor.JPG&quot; imageanchor=&quot;1&quot; style=&quot;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;189&quot; src=&quot;http://4.bp.blogspot.com/_9kQQgQD35rY/SaV5p8YBGhI/AAAAAAAAAkg/HOvlhIo7yGI/s320/06_Red_Green_Refactor.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;But reality says it will happen--you will undoubtedly get a green bar when you expect a red bar from time to time. (We call this occurrence a &lt;i&gt;premature pass&lt;/i&gt;.)&amp;nbsp;&lt;span style=&quot;background-color: white;&quot;&gt;Understanding one of the many reasons why you got a premature pass might help save you precious time.&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;Running the wrong tests&lt;/b&gt;. This smack-your-forehead event occurs when you think you were including your new test in the run, but were not, for one of myriad reasons. Maybe you forgot to compile it, link in the new test, ran the wrong suite, disabled the new test, filtered it out, or coded it improperly so that the tool didn&#39;t recognize it as a legitimate test. &lt;i&gt;Suggestion: Always know your current test count, and ensure that your new test causes it to increment&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;Testing the wrong code&lt;/b&gt;. You might have a premature pass for some of the same reasons as &quot;running the wrong tests,&quot; such as failure to compile (in which case the &quot;wrong code&quot; that you&#39;re running is the last compiled version). Perhaps the build failed and you thought it passed, or your classpath is picking up a different version. More insidiously, if you&#39;re mucking with test doubles, your test might not be exercising the class implementation that you think it is (polymorphism can be a tricky beast). &lt;i&gt;Suggestion: Throw an exception as the first line of code you think you&#39;re hitting, and re-run the tests.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;Unfortunate test specification&lt;/b&gt;. Sometimes you mistakenly assert the wrong thing, and it happens to match what the system currently does. I recently coded an &lt;code&gt;assertTrue&lt;/code&gt; where I meant &lt;code&gt;assertFalse&lt;/code&gt;, and spent a few minutes scratching my head when the test passed. &lt;i&gt;Suggestion: Re-read (or have someone else read) your test to ensure it specifies the proper behavior.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;Invalid assumptions about the system&lt;/b&gt;. If you get a premature pass, you know your test is recognized and it&#39;s exercising the right code, and you&#39;ve re-read the test... perhaps the behavior already exists in the system. Your test assumed that the behavior wasn&#39;t in the system, and following the process of TDD proved your assumption wrong. &lt;i&gt;Suggestion: Stop and analyze your system, perhaps adding &lt;a href=&quot;http://agileinaflash.blogspot.com/2009/02/writing-characterization-tests.html&quot;&gt;characterization tests&lt;/a&gt;, to fully understand how it behaves.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;Suboptimal test order&lt;/b&gt;. As you are test-driving a solution, you&#39;re attempting to take the smallest possible incremental steps to grow behavior. Sometimes you&#39;ll choose a less-than-optimal sequence. You subsequently get a premature pass because the prior implementation unavoidably grew out a more robust solution than desired. &lt;i&gt;Suggestions: Consider starting over and seeking a different sequence with smaller increments. Try to apply &lt;a href=&quot;http://cleancoder.posterous.com/the-transformation-priority-premise&quot;&gt;Uncle Bob&#39;s Transformation Priority Premise (TPP)&lt;/a&gt;.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;Linked production code&lt;/b&gt;. If you are attempting to devise an API to be consumed by multiple clients, you&#39;ll often introduce convenience methods such as &lt;code&gt;isEmpty&lt;/code&gt;&amp;nbsp;(which inquires about the size to determine its answer). These convenience methods necessarily duplicate code. If you try to assert against &lt;code&gt;isEmpty&lt;/code&gt; every time you assert against size, you&#39;ll get premature passes. &lt;i&gt;Suggestions: Create tests that document the link from the convenience method to the core functionality, demonstrating them. Or combine the related assertions into a single custom assertion (or helper method).&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;Overcoding&lt;/b&gt;. A different form of &quot;invalid assumptions about the system,&quot; you overcode when you supply more of an implementation than necessary while test-driving. This is a hard lesson of TDD--to supply no more code or data structure than necessary when getting a test to pass. &lt;i&gt;Suggestion: Hard lessons are best learned with dramatic solutions. Discard your bloated solution and try again. It&#39;ll be better, we promise.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;Testing for confidence&lt;/b&gt;. On occasion, you&#39;ll know when you think a test will generate a premature pass. There&#39;s nothing wrong with writing a couple additional tests: &quot;I wonder if it works for this edge case,&quot; particularly if those tests give you confidence, but technically you have stepped outside the realm of TDD and moved into the realm of &lt;a href=&quot;http://agileinaflash.blogspot.com/2009/02/why-pout-aka-tad-sucks.html&quot;&gt;TAD&lt;/a&gt; (test-after development). &lt;i&gt;Suggestions: Don&#39;t hesitate to write more tests to give you confidence, but you should generally have a good idea of whether they will pass or fail before you run them.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span style=&quot;background-color: white;&quot;&gt;Two key things to remember:&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;&lt;i&gt;Never skip running the tests to ensure you get a red bar.&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: white;&quot;&gt;&lt;b&gt;&lt;i&gt;Pause and think any time you get a premature pass.&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/1411310108937935509/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2012/07/premature-passes-why-you-might-be.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1411310108937935509'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1411310108937935509'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2012/07/premature-passes-why-you-might-be.html' title='Premature Passes: Why You Might Be Getting Green on Red'/><author><name>Jeff Langr</name><uri>http://www.blogger.com/profile/10499693020049210645</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/_9kQQgQD35rY/SaV5p8YBGhI/AAAAAAAAAkg/HOvlhIo7yGI/s72-c/06_Red_Green_Refactor.JPG" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-5581470694525142868</id><published>2012-06-26T06:00:00.000-05:00</published><updated>2012-06-26T06:00:09.926-05:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="cardinality"/><category scheme="http://www.blogger.com/atom/ns#" term="computer science"/><category scheme="http://www.blogger.com/atom/ns#" term="many"/><category scheme="http://www.blogger.com/atom/ns#" term="one"/><category scheme="http://www.blogger.com/atom/ns#" term="polymorphism"/><category scheme="http://www.blogger.com/atom/ns#" term="programming"/><category scheme="http://www.blogger.com/atom/ns#" term="zero"/><title type='text'>Simplify Design With Zero, One, Many</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://langrsoft.com/ftp/zom.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://langrsoft.com/ftp/zom.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Programmers have to consider cardinality in data. For instance, a simple mailing list program may need to deal with people having multiple addresses, or multiple people at the same address.&amp;nbsp;&lt;span style=&quot;background-color: white;&quot;&gt;Likewise, we may have a number of alternative implementations of an algorithm. Perhaps the system can send an email, or fax a pdf, or send paper mail, or SMS, or MMS, or post a Facebook message. It&#39;s all the same business, just different delivery means.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Non-programmers don&#39;t always understand the significance of these numbers:&lt;br /&gt;&lt;br /&gt;Analyst:&amp;nbsp;&lt;i&gt;&quot;Customers rarely use that feature, so it shouldn&#39;t be hard to code.&quot;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;Program features are rather existential--they either have to be written or they don&#39;t. &amp;nbsp;&quot;Simplicity&quot; is largely a matter of how few decisions the code has to make, and not how often it is executed.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;The Rule of Zero: No Superfluous Parts&lt;/b&gt;&lt;br /&gt;&lt;i&gt;We have no unneeded or superfluous constructs in our system.&lt;/i&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Building to immediate, current needs &lt;a href=&quot;http://agileinaflash.blogspot.com/2009/04/four-options-for-agile-projects.html&quot;&gt;keeps our options open&lt;/a&gt; for future work. If we need some bit of code later, we can build it later with better tests and more immediate value.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Likewise, if we no longer need a component or method, we should delete it now. Don&#39;t worry, you can retrieve anything you delete from version control or even rewrite it (often faster and better than before).&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;     The Rule of One: &amp;nbsp;Occam&#39;s Razor Applied To Software&lt;br /&gt;&lt;i style=&quot;font-weight: normal;&quot;&gt;If we only need one right now, we code as if one is all there will ever be.&lt;/i&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;We&#39;ve learned (the hard way!) that code needs to be &lt;a href=&quot;http://agileinaflash.blogspot.com/2010/02/seven-code-virtues.html&quot;&gt;unique&lt;/a&gt;. That part of the rule is obvious, but sometimes we don&#39;t apply &quot;so far&quot; to the rule. Thinking that you might need more than one in a week, tomorrow, or even in an hour isn&#39;t enough reason to complicate the solution. If we have a single method of payment today, but we might have many in the future, we still want to treat the system as if there were only going to be one.&lt;/li&gt;&lt;li&gt;Future-proofing done now (see the &quot;&lt;a href=&quot;http://agileinaflash.blogspot.com/2009/04/four-options-for-agile-projects.html&quot;&gt;options&lt;/a&gt;&quot; card) gets in the way of simply making the code work. The primary goal is to have &lt;a href=&quot;http://agileinaflash.blogspot.com/2010/02/seven-code-virtues.html&quot;&gt;working code&lt;/a&gt; immediately.&amp;nbsp;&lt;/li&gt;&lt;li&gt;When we had originally written code with multiple classes and we later eliminate all but one, we can often simplify the code by removing the scaffolding that made &quot;many&quot; possible. This leaves us with &lt;a href=&quot;http://agileinaflash.blogspot.com/2009/02/simple-design.html&quot;&gt;No Superfluous Parts&lt;/a&gt;, which makes code simple again.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;     The Rule of Many: In For a Penny, In For a Pound&lt;br /&gt;&lt;i style=&quot;font-weight: normal;&quot;&gt;Code is simpler when we write it to a general case, not as a large collection of special cases.&lt;/i&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;A list or array may be a better choice than a pile of individual variables--&lt;i&gt;provided the items are treated uniformly&lt;/i&gt;.&amp;nbsp;Consider &quot;point0, point1, point2.&quot; Exactly three variables, hard-coded into a series of names with number sequences. If they had different meanings, they would likely have been given different names (for instance, X, Y, and Z). &amp;nbsp;What is the clear advantage of saying &#39;point0&#39; instead of point[0]?&amp;nbsp;&lt;/li&gt;&lt;li&gt;It&#39;s usually easier to code for &quot;many&quot; than a fixed non-zero number. For example,&amp;nbsp;a business rule requiring there are exactly three items is easily managed by checking the length of the array, and not so easily managed by coding three discrete conditionals. Iterating over an initialized collection also eliminates the need to do null checking when it contains no elements.&lt;/li&gt;&lt;li&gt;Non-zero numbers greater than one tend to be policy decisions, and likely to change over time.&lt;/li&gt;&lt;li&gt;When several possible algorithms exist to calculate a result we might be tempted to use a type flag and a case statement, but if&amp;nbsp;we find a way to treat implementations uniformly we can code for &quot;many&quot; instead of &quot;five.&quot; This helps us recognize and implement useful abstractions, perhaps&amp;nbsp;letting us&amp;nbsp;&lt;a href=&quot;http://sourcemaking.com/refactoring/replace-conditional-with-polymorphism&quot;&gt;replace case statements with polymorphism&lt;/a&gt;.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;Naturally, these aren&#39;t the only simple rules you will ever need. But simple, evolutionary design is well supported by the ZOM rules regardless of programming language, development methodology, or domain.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/5581470694525142868/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2012/06/simplify-design-with-zero-one-many.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5581470694525142868'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5581470694525142868'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2012/06/simplify-design-with-zero-one-many.html' title='Simplify Design With Zero, One, Many'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-2091312884317945991</id><published>2012-06-05T08:30:00.000-05:00</published><updated>2012-06-05T10:31:47.427-05:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile adoption"/><category scheme="http://www.blogger.com/atom/ns#" term="cards"/><category scheme="http://www.blogger.com/atom/ns#" term="contest"/><category scheme="http://www.blogger.com/atom/ns#" term="sale"/><title type='text'>The &quot;Flash a Friend&quot; Contest: A Covert Agile Give-Away!</title><content type='html'>If you&#39;re reading this blog, you&#39;re probably a believer that a good agile process can make a difference. And maybe you&#39;ve recognized someone on your team, on another team, or even in a different company that you think would benefit from a little covert mentoring.&lt;br /&gt;&lt;br /&gt;We&#39;d like to help! We believe getting these cards in the hands of the right people can make a real difference. We&#39;re willing to put that belief in action.&lt;br /&gt;&lt;br /&gt;Here&#39;s how it works:&lt;br /&gt;&lt;ul&gt;&lt;a href=&quot;http://imagery.pragprog.com/products/217/olag_xlargecover.jpg?1298589962&quot; imageanchor=&quot;1&quot; style=&quot;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&quot;&gt;&lt;img alt=&quot;Cover Image For Agile in a Flash...&quot; border=&quot;0&quot; src=&quot;http://imagery.pragprog.com/products/217/olag_xlargecover.jpg?1298589962&quot; /&gt;&lt;/a&gt;&lt;li&gt;Email us at &lt;a href=&quot;mailto:AgileInAFlash@mail.com&quot;&gt;AgileInAFlash@mail.com&lt;/a&gt;, recommending one person who you think should receive a free deck. You don&#39;t have to name names, you can say &quot;&lt;i&gt;my boss&lt;/i&gt;,&quot; &quot;&lt;i&gt;our architect&lt;/i&gt;,&quot; &quot;&lt;i&gt;my dog,&lt;/i&gt;&quot; &quot;&lt;i&gt;my cousin,&lt;/i&gt;&quot; etc. You can even name &lt;i&gt;yourself&lt;/i&gt;!&lt;/li&gt;&lt;li&gt;Tell us in one short, pithy line why you think that this person/team would benefit from Agile in a Flash.&amp;nbsp;&lt;/li&gt;&lt;li&gt;We&#39;ll read the comments and pick our favorites.&lt;/li&gt;&lt;li&gt;If your entry is selected, we will contact you and get the particulars (names, addresses).&lt;/li&gt;&lt;li&gt;The person you recommended gets a deck of Agile in a Flash from us. No note, no card, no explanation. &amp;nbsp;&lt;/li&gt;&lt;li&gt;To thank you for being so helpful, we send a second deck to you!&lt;/li&gt;&lt;li&gt;We&#39;ll put the winning comments on a soon-to-be-pubished Agile in a Flash blog entry. (You can choose to be attributed or anonymous.)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Deadline for entries: Friday June 15, 1200 MDT&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/2091312884317945991/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2012/06/flash-friend-contest-covert-agile-give.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/2091312884317945991'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/2091312884317945991'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2012/06/flash-friend-contest-covert-agile-give.html' title='The &quot;Flash a Friend&quot; Contest: A Covert Agile Give-Away!'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-1051695114392790039</id><published>2012-05-15T05:45:00.000-05:00</published><updated>2012-05-15T05:45:00.583-05:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="meaningful names"/><category scheme="http://www.blogger.com/atom/ns#" term="plain old unit testing"/><category scheme="http://www.blogger.com/atom/ns#" term="POUT"/><category scheme="http://www.blogger.com/atom/ns#" term="TAD"/><category scheme="http://www.blogger.com/atom/ns#" term="TDD"/><category scheme="http://www.blogger.com/atom/ns#" term="test-driven development"/><category scheme="http://www.blogger.com/atom/ns#" term="testing"/><category scheme="http://www.blogger.com/atom/ns#" term="unit testing"/><title type='text'>Seven Steps to Great Unit Test Names</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://langrsoft.com/ftp/greatUnitTests.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://langrsoft.com/ftp/greatUnitTests.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;You can find many good blog posts on &lt;a href=&quot;http://thinkoftheepsilons.blogspot.com/2012/04/how-do-you-name-your-tests.html&quot;&gt;&lt;i&gt;what&lt;/i&gt; to name your tests&lt;/a&gt;. We present instead an appropriate strategy for &lt;i&gt;when and how&lt;/i&gt; to think about test naming.&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;b id=&quot;internal-source-marker_0.9314969882834703&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Don&#39;t sweat the initial name.&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; A bit of thought about what you&#39;re testing is essential, but don&#39;t expend much time on the name yet. Type in a name, quickly. Use &lt;a href=&quot;http://agileinaflash.blogspot.com/2009/03/arrange-act-assert.html&quot;&gt;AAA&lt;/a&gt; or &lt;a href=&quot;http://blog.gdinwiddie.com/2012/01/23/contemplating-given-when-then/&quot;&gt;Given-When-Then&lt;/a&gt; to help derive one. It might be terrible--we&#39;ve named tests &quot;DoesSomething&quot; before we knew exactly what they needed to accomplish. We&#39;ve also written extensively long test names to capture a spewn-out train of thought. No worries--you&#39;ll revisit the name soon enough.&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b id=&quot;internal-source-marker_0.9314969882834703&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Write the test.&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; As you design the test, you&#39;ll figure out precisely what the test needs to do. You pretty much have to, otherwise you aren&#39;t getting past this step! :-)  When the test fails, look at the combination of the fixture name, test method name, and assertion message. These three should (eventually) uniquely and clearly describe the intent of the test. Make any obvious corrections, like removing redundancy or improving the assertion message. Don&#39;t agonize about the name yet; it&#39;s still early in the process. &lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b id=&quot;internal-source-marker_0.9314969882834703&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Get it to pass.&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; Focus on simply getting the test to pass. This is not the time to worry about the test name. If you have to wait any significant time for your test run, start thinking about a more appropriate name for the test (see step 4).&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b id=&quot;internal-source-marker_0.9314969882834703&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Rename based on content.&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; Once a test works, you &lt;i&gt;must&lt;/i&gt; &lt;b id=&quot;internal-source-marker_0.9314969882834703&quot; style=&quot;font-family: &#39;Times New Roman&#39;; font-size: medium; white-space: normal;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;b id=&quot;internal-source-marker_0.9314969882834703&quot; style=&quot;font-family: &#39;Times New Roman&#39;; font-size: medium; white-space: normal;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;revisit its name. &lt;/span&gt;&lt;/b&gt;Re-read the test. &lt;b id=&quot;internal-source-marker_0.9314969882834703&quot; style=&quot;font-family: &#39;Times New Roman&#39;; font-size: medium; white-space: normal;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Now that you know what it does, you should find it much easier to come up with a concise name. &lt;/span&gt;&lt;/b&gt;If you had an overly verbose test name, &lt;b id=&quot;internal-source-marker_0.9314969882834703&quot; style=&quot;font-family: &#39;Times New Roman&#39;; font-size: medium; white-space: normal;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;you should be able to eliminate some noise words by using more abstract or simpler terms&lt;/span&gt;&lt;/b&gt;. You may need to look at other tests or talk to someone to make sure you&#39;re using appropriate terms from the domain language.&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b id=&quot;internal-source-marker_0.9314969882834703&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Rename based on a holistic fixture view.&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; In Eclipse, for example, you can do a ctrl-O to bring up an outline view showing the names for all related tests. However you review all the test names, make sure your new test&#39;s name is consistent with the others. The test is a member of a collection, so consider the collection as a system of names.&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;Rename and reorganize other tests as appropriate. &lt;/b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;Often you&#39;ll question the names of the other tests. Take a few moments to improve them, with particular focus given to the impact of the new test&#39;s name. You might also recognize the need to split the current fixture into multiple fixtures.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;b style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;Reconsider the name with each revisit.&lt;/b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt; &lt;b id=&quot;internal-source-marker_0.9314969882834703&quot; style=&quot;font-family: &#39;Times New Roman&#39;; font-size: medium; white-space: normal;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Unit tests can act as great living documentation -- but only if intentionally written as such. &lt;/span&gt;&lt;/b&gt;Try to use the tests as your first and best understanding of how a class behaves. The first thing you should do when challenged with a code change is read the related tests. The second thing you should do is rename any unclear test names.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt;The test names you choose may seem wonderful and clear to you, but you know what you intended when you wrote them. They might not be nearly as meaningful to someone who wasn&#39;t involved with the initial test-writing effort. Make sure you have some form of review to vet the test names. An uninvolved developer should be able to understand the test as a stand-alone artifact - not having to consult with the test&#39;s author (you). If pair programming, it&#39;s still wise to get a third set of eyes on the test names before integrating.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;Unit tests require a significant investment of effort, but &lt;/span&gt;&lt;b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;renaming a test is cheap and safe. Don’t resist incrementally driving toward the best name possible.&amp;nbsp;&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;Continuous renaming of tests is an easy way of helping ensure that your investment will return appropriate value.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/1051695114392790039/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2012/05/seven-steps-to-great-unit-test-names.html#comment-form' title='9 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1051695114392790039'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1051695114392790039'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2012/05/seven-steps-to-great-unit-test-names.html' title='Seven Steps to Great Unit Test Names'/><author><name>Jeff Langr</name><uri>http://www.blogger.com/profile/10499693020049210645</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>9</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-5965372801395692739</id><published>2012-04-25T08:53:00.000-05:00</published><updated>2012-04-25T08:53:43.275-05:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="FIRST"/><category scheme="http://www.blogger.com/atom/ns#" term="isolation"/><category scheme="http://www.blogger.com/atom/ns#" term="mocking"/><category scheme="http://www.blogger.com/atom/ns#" term="mocks"/><category scheme="http://www.blogger.com/atom/ns#" term="TDD"/><category scheme="http://www.blogger.com/atom/ns#" term="test double"/><category scheme="http://www.blogger.com/atom/ns#" term="test-driven development"/><category scheme="http://www.blogger.com/atom/ns#" term="unit testing"/><title type='text'>Is Your Unit Test Isolated?</title><content type='html'>&lt;div style=&quot;background-color: transparent;&quot;&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://langrsoft.com/images/isolatedTests.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://langrsoft.com/images/isolatedTests.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;(Kudos to the great software guru &lt;/span&gt;&lt;a href=&quot;http://www.jefffoxworthy.com/&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Jeff Foxworthy&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; for the card phrasing.)&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;An effective unit test should follow the &lt;/span&gt;&lt;a href=&quot;http://agileinaflash.blogspot.com/2009/02/first.html&quot; style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;FIRST&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; prescriptions in order to verify a small piece of code logic (&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-style: italic; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;aka&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; “unit”). But what exactly does it mean for a unit test to be &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-style: italic; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;I&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-style: italic; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; for &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-style: italic; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;I&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-style: italic; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;solated&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;? Simply put, an isolated test has only a single reason to fail.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;If you see these symptoms, you may have an isolation problem:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Can&#39;t run concurrently with any other. &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;If your test can’t run at the same time as another, then they share a runtime environment. This occurs most often when your test uses global, static, or external data.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;A quick fix: Find code that uses shared data and extract it to a function that can replaced with a test double. In some cases, doing so might be a stopgap measure suggesting the need for redesign.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Relies on any other test in any way. &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Should you reuse the context created by another test? For example, your unit test could assume a first test added an object into the system (a “&lt;/span&gt;&lt;a href=&quot;http://blog.james-carr.org/2006/11/03/tdd-anti-patterns/&quot; style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;generous leftover&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;”). Creating test inter-dependencies is a recipe for massive headaches, however. Failing tests will trigger wasteful efforts to track down the problem source. Your time to understand what’s going on in any given test will also increase.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Unit tests should assume a clean slate and re-create their own context, never depending on an order of execution. Common context creation can be factored to setup or a helper method (which can then be more easily test-doubled if necessary). You might use your test framework&#39;s randomizer mode (e.g. googletest’s &lt;/span&gt;&lt;span style=&quot;background-color: #eeeeee; color: #444444; font-family: Consolas; font-size: 13px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;--gtest_shuffle)&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; to pinpoint tests that either deliberately or accidentally depend on leftovers.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;You might counter that having to re-execute the common setup twice is wasteful, and will slow your test run. Our independent &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-style: italic; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;unit&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; tests are ultra-fast, however, and so this is never a real problem. See the next bullet.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Relies on any external service. &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Your test may rely upon a database, a web service, a shared file system, a hardware component, or a human being who is expected to operate a simulator or UI element. Of these, the reliance on a human is the most troublesome.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;SSDD (same solution different day): Extract methods that interact with the external system, perhaps into a new class, and mock it. &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Requires a special environment. &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;“It worked on my machine!” A &lt;/span&gt;&lt;a href=&quot;http://blog.james-carr.org/2006/11/03/tdd-anti-patterns/&quot; style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Local Hero&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; arises when you write tests for a specific environment, and is a sub-case of &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Relies on any external service&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;. Usually you uncover a Local Hero the first time you commit your code and it fails during the CI build or on your neighbor’s dev box.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The problem is often a file or system setting, but you can also create problems with local configuration or database schema changes. Once the problem arises, it’s usually not too hard to diagnose on the machine where the test fails.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;There are two basic mitigation strategies:&lt;/span&gt;&lt;br /&gt;&lt;ol style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;b&gt;&lt;li style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; list-style-type: decimal; vertical-align: baseline;&quot;&gt;&lt;span style=&quot;vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Check in more often, which might help surface the problem sooner&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; list-style-type: decimal; vertical-align: baseline;&quot;&gt;&lt;span style=&quot;vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Periodically wipe out and reinstall (“pave”) your development environment&lt;/span&gt;&lt;/li&gt;&lt;/b&gt;&lt;/ol&gt;&lt;b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Can’t tell you why it fails. &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;A fragile test has several ways it might fail, in which case it is hard to make it produce a meaningful error message. Good tests are highly communicative and terse. By looking at the name of the test class, the name of the method, and the test output, you should know what the problem is&lt;/span&gt;&lt;span style=&quot;font-family: &#39;Courier New&#39;; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;:&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;background-color: transparent;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-family: &#39;Courier New&#39;; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;   CSVFileHandling.ShouldToleratedEmbeddedQuotes -&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &#39;Courier New&#39;; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; &amp;nbsp;   &amp;nbsp;Expected &quot;Isn&#39;t that grand&quot; but result was &quot;Isn&quot;&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;You shouldn&#39;t normally need to dig through setup code, or worse, production code, to determine why your test failed.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The more of the SUT exercised by your test, the more reasons that code can fail and the harder it is to craft a meaningful message. Try focusing your test on a smaller part of the system. Ask yourself “what am I really trying to test here?”&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Your test might be failing because it made a bad assumption. A precondition assertion might be prudent if you are at all uncertain of your test’s current context.&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Mocks indirect collaborators. &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;If you are testing public behavior exposed by object A, and object A interacts with collaborator B, you should only be defining &lt;/span&gt;&lt;a href=&quot;http://agileinaflash.blogspot.com/2010/03/mock-terminology.html&quot; style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;test doubles&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; for B. If the tests for A involve stubbing of B’s collaborators, however, you’re entering into mock hell.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Mocks violate encapsulation in a sense, potentially creating tight coupling with implementation details. Implementation detail changes for B shouldn’t break your tests, but they will if your test involves test doubles for B’s collaborators.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Your unit test should require few test doubles and very little preliminary setup. If setup becomes elaborate or fragile, it’s a sign you should split your code into smaller testable units. For a small testable unit, zero or one test doubles should suffice.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;i&gt;In summary, unit tests--which we get most effectively by practicing TDD--are easier to write and maintain the more they are isolated.&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/5965372801395692739/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2012/04/is-your-unit-test-isolated.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5965372801395692739'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5965372801395692739'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2012/04/is-your-unit-test-isolated.html' title='Is Your Unit Test Isolated?'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-7225150515856064342</id><published>2011-11-30T12:17:00.072-06:00</published><updated>2011-12-01T11:49:39.705-06:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="abstraction"/><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="code smells"/><category scheme="http://www.blogger.com/atom/ns#" term="TDD"/><category scheme="http://www.blogger.com/atom/ns#" term="test abstraction"/><category scheme="http://www.blogger.com/atom/ns#" term="unit testing"/><title type='text'>Test Abstraction Smells</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://langrsoft.com/ftp/testAbstractionSmells.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;300&quot; src=&quot;http://langrsoft.com/ftp/testAbstractionSmells.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;In our article &lt;a href=&quot;http://pragprog.com/magazines/2011-04/test-abstraction&quot;&gt;Test Abstraction: Eight Techniques to Improve Your Tests&lt;/a&gt; (published by PragPub), we whittled down a convoluted, messy test into a few concise and expressive test methods, using this set of smells as a guide. We improved the abstraction of this messy test by emphasizing its key parts and de-emphasizing its irrelevant details.&lt;br /&gt;&lt;br /&gt;Stripped down, the &quot;goodness&quot; of a test is largely a matter of how quickly these questions can be answered:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;What&#39;s the point of this test?&lt;/li&gt;&lt;li&gt;Why is the assertion expecting this particular answer?&lt;/li&gt;&lt;li&gt;Why did this test just fail?&lt;/li&gt;&lt;/ul&gt;That&#39;s a nice short-form summary, but it is descriptive rather than prescriptive. In the Pragmatic Bookshelf article, a real-world code example was used to painstakingly demonstrate the techniques used to improve the clarity of tests by increasing their level of abstraction. Here we provide the &quot;cheat sheet&quot; version:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Unnecessary test code&lt;/b&gt;. Eliminate test constructs that clutter the flow of your tests without imparting relevant meaning. Most of the time, &quot;not null&quot; assertions are extraneous. Similarly, eliminate try/catch blocks from your tests (in all but negative-case tests themselves).&lt;/li&gt;&lt;li&gt;&lt;b&gt;Missing abstractions&lt;/b&gt;. Are you exposing several lines of implementation detail to express test set-up (or verification) that represents a single concept? Think in terms of reading a test: &quot;Ok, it&#39;s adding a new student to the system. Fine. Then it&#39;s creating an empty list, and then adding A to that list, then B, and ..., and then that list is then used to compare against the expected grades for the student.&quot; The list construction is ugly exposed detail. Reconstruct the code so that your reader, in one glance, can digest a &lt;em&gt;single&lt;/em&gt; line that says &quot;ensure the student&#39;s expected grades are A, A, B, B, and C.&quot;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Irrelevant data&lt;/b&gt;. &quot;Say, why does that test pass the value &#39;2&#39; to the SUT? It looks like they pass in a session object, too... does it require that or not?&quot; Every piece of data shown in the test that bears no weight on its outcome is clutter that your reader must wade through and inspect. &quot;Is that value of &#39;2&#39; the reason we get output of &#39;42&#39;?&quot; Well, no, it&#39;s not. Take it out, hide it, make it more abstract! (For example, we&#39;ll at times use constant names like ARBITRARY_CHARGE_AMOUNT.)&lt;/li&gt;&lt;li&gt;&lt;b&gt;Bloated construction&lt;/b&gt;. It may take a bit of setup to get your SUT in the state needed for the test to run, but if it&#39;s not relevant to core test understanding, move the clutter out. Excessive setup is a design smell, showing that the code being tested needs rework. Don&#39;t cope with the problem by leaving extensive setup in your test, but tackle the problem by reworking the code as soon as you have reasonable test coverage. Of course, the problem of untestable code is largely eliminated through the use of TDD.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Irrelevant details&lt;/b&gt;. Is every step of the test really needed?&amp;nbsp;For example, suppose your operational system requires the presence of a global session object, pre-populated with a few things. You may find that you can&#39;t even execute your unit test without having it similarly populate the session object. For most tests, however, the details of populating the session object have nothing to do with the goal of the test. There are usually better ways to design the code unit, and if you can&#39;t change your design to use one of those ways, you should at least bury the irrelevant details.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Multiple assertions&lt;/b&gt;. A well-abstracted unit test represents one case: &quot;If I do &lt;em&gt;this&lt;/em&gt; stuff, I observe &lt;em&gt;that&lt;/em&gt; behavior.&quot; Combining several cases muddies the abstraction--which setup/execution concepts are relevant to which resulting behaviors? Which assertion represents the goal of the test case? Most tests with multiple assertions are ripe for splitting into multiple tests. Where it makes sense to keep multiple assertions in a single test, can you at least abstract its multiple assertions into a single helper method?&lt;/li&gt;&lt;li&gt;&lt;b&gt;Misleading organization&lt;/b&gt;. You can easily organize tests using AAA (Arrange-Act-Assert). Remember that once green, we re-read any given test (as a document of SUT behavior) only infrequently--either when the test unexpectedly fails or when changes need to be made. Being able to clearly separate the initial state (Arrange) from the activity being tested (Act) from the expected result (Assert) will speed the future reader (perhaps yourself in 5 months) on his way. When setup, actions, and assertions are mixed, the test will require more careful study. Spare your team members the chore of repeatedly deciphering your tests down the road--spend the time now to make them clear and obvious.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Implicit meaning&lt;/b&gt;. It&#39;s not all just getting rid of stuff; abstraction requires amplifying essential test elements. Imagine a test that says &quot;apply a fine of 30 cents on a book checked out December 7 and returned December 31.&quot; Why those dates? Why that amount? If we challenged you to tell us the rules that govern the outcome of this test, you&#39;d likely get them wrong. A meaningful test would need to describe, in one manner or another, these relevant concepts and elements:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;books are normally checked out for 21 days&lt;/li&gt;&lt;li&gt;Christmas--a date in the 21-day span following December 7--is a grace day (i.e. no fines are assessed)&lt;/li&gt;&lt;li&gt;The due date is thus December 29&lt;/li&gt;&lt;li&gt;December 31 is two days past the due date&lt;/li&gt;&lt;li&gt;Books are fined 20 cents for the first day late and 10 cents for each additional day.&lt;/li&gt;&lt;li&gt;30c = 20c + 10c&lt;/li&gt;&lt;/ul&gt;(Consider that each of these concepts could represent a separate unit test case, and that this detailed scenario represents more of an end-to-end test case.)&lt;br /&gt;A&amp;nbsp;unit test that requires you to dig through code to discern the reasons for its outcome is wasteful.&lt;/li&gt;&lt;/ul&gt;You could easily survive without our list of test abstraction smells--and figure out on your own what to do about your tests--as long as you keep one thought in your head: &quot;My goal is to ensure that each unit test clearly expresses its intent, and nothing else, to the next person who must understand this system behavior.&quot;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/7225150515856064342/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/11/test-abstraction-smells.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/7225150515856064342'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/7225150515856064342'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/11/test-abstraction-smells.html' title='Test Abstraction Smells'/><author><name>Jeff Langr</name><uri>http://www.blogger.com/profile/10499693020049210645</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-8901439574184680002</id><published>2011-11-22T09:24:00.002-06:00</published><updated>2011-11-22T09:27:21.903-06:00</updated><title type='text'>The 4 Ts of Engaging Management</title><content type='html'>Teams self-organize and self-direct, so much of the Taylorist views of what a manager can do seem to not apply at all. What is the working arrangement between an agile team and their manager?&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-7UpL-7rBP08/Tsu-V3-K9fI/AAAAAAAABUA/wb764z2VB9A/s1600/Screen+shot+2011-11-22+at+9.21.52+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;235&quot; src=&quot;http://4.bp.blogspot.com/-7UpL-7rBP08/Tsu-V3-K9fI/AAAAAAAABUA/wb764z2VB9A/s400/Screen+shot+2011-11-22+at+9.21.52+AM.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Time (schedule) - As a steward of the schedule, a manager needs to know where the teams&#39; effort stands--are they behind or ahead the expected schedule? Does the release need to be delayed or de-scoped? The manager is best positioned to communicate issues and evaluate the larger impact to the organization. &amp;nbsp;When the schedule needs change, we find that your chance of success is greater the earlier the matter is communicated to management. While human nature may lead one to avoid delivering bad news, it is usually better to share problems with people who are in a position to help.&lt;/li&gt;&lt;li&gt;Talent (talent pool) - A manager may bring in additional talent in the form of trainers, consultants, staff augmentation contractors, or new employees. Sometimes having an eLearning course, a visiting expert, or a short-term consultant can make a huge long-term difference in the team&#39;s technical proficiency. &lt;br /&gt;A manager may change hiring criteria to bring in the kinds of developers that will&amp;nbsp;help the team to work in a more fluent and productive way. &lt;br /&gt;Likewise, a manager can remove or reassign a team member who just isn&#39;t working for the current team. These kinds of issues&amp;nbsp;require coordination with HR and possibly even legal representation, but are a good use of your manager&#39;s time. See also &lt;a href=&quot;http://en.wikipedia.org/wiki/The_No_Asshole_Rule&quot;&gt;Robert Sutton&#39;s research&lt;/a&gt; on maintaining a productive workplace.&lt;/li&gt;&lt;li&gt;Target (direction, goals) - Agility (strictly defined) is the ability to change direction gracefully. Sometimes a change of technology or target audience can greatly improve a product&#39;s chance of being accepted in the market. Additionally, agile teams would rather face failures early when they&#39;re inexpensive (fail fast) than have hopeless projects run on until resources are exhausted. Any&amp;nbsp;a significant change in direction, whether cost-saving or value-creating, will need to involve management.&lt;/li&gt;&lt;li&gt;Treasury (funding) - There are times that spending a few hundred or a few thousand dollars can make the difference between the team working fluidly versus struggling and slogging along. Is your biggest need for a distributed build product? A better build server? An alternative testing tool? A local version control server? More reliable intranet? A better library or framework? A minor hardware upgrade? An online training course?&lt;/li&gt;&lt;/ul&gt;When a problem can only be solved using one or more of the 4Ts, then it is clearly a management problem. Make use of your manager&#39;s sphere of influence to improve the team&#39;s chance of success.&lt;br /&gt;&lt;br /&gt;Agile supports the empowered, competent team. The team should own their problems and push forward with solutions and data-based decision-making. &amp;nbsp;On the other hand, a team can hardly be called &quot;resourceful&quot; when their management assets go unused.&amp;nbsp;Remember that the manager is a member of the team, and often managers pride themselves on problem-solving.&lt;br /&gt;&lt;br /&gt;For problems in the gray area where some solutions are purely technical, it may be wise to involve management in triage. You would be surprised how many times teams have struggled with a work-around only to find that a manager would have been happy to solve the problem outright through his contacts and resources.&lt;br /&gt;&lt;br /&gt;In your next retrospective, consider adding solution category called &quot;take it to management.&quot; See if it helps your velocity over time.</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/8901439574184680002/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/11/4-ts-of-engaging-management.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/8901439574184680002'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/8901439574184680002'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/11/4-ts-of-engaging-management.html' title='The 4 Ts of Engaging Management'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-7UpL-7rBP08/Tsu-V3-K9fI/AAAAAAAABUA/wb764z2VB9A/s72-c/Screen+shot+2011-11-22+at+9.21.52+AM.png" height="72" width="72"/><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-1417761873496327007</id><published>2011-10-12T22:42:00.000-05:00</published><updated>2011-10-12T22:42:27.877-05:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="managers"/><category scheme="http://www.blogger.com/atom/ns#" term="motivation"/><category scheme="http://www.blogger.com/atom/ns#" term="process smell"/><category scheme="http://www.blogger.com/atom/ns#" term="project management"/><category scheme="http://www.blogger.com/atom/ns#" term="whole team"/><title type='text'>Management Theater</title><content type='html'>Great managers can improve teams in meaningful ways: smoothing the workflow, selecting targets worth hitting, wisely managing budget and schedule, and working to align teams with organizational goals. We have fond memories of great managers, technical or otherwise, who led and mentored us, who helped us reach new plateaus of understanding and productivity.&lt;br /&gt;&lt;br /&gt;We&#39;re not talking about those great managers today.&lt;br /&gt;&lt;br /&gt;Instead, we&#39;ll discuss a particular form of management dysfunction often seen in development shops. Daniel Pink (in Drive) points out that programming shops are full of people who are motivated by the work and excited to make progress. Intrinsic motivation tends to be quite high, though exceptions exist (see Esther Derby&#39;s &lt;a href=&quot;http://www.cio.com/article/123406/Stop_Demotivating_Me_&quot;&gt;&lt;i&gt;Stop Demotivating Me&lt;/i&gt;&lt;/a&gt;). Most shops face problems with procedure, organization, technological limits, overly ambitious schedules, and shortage of knowledge or practice. Less astute managers don&#39;t understand the problems in their teams, and misinterpret these as motivational issues. When the problem is technical, it does not help to attempt solving it through motivation.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-xy86K10fjDM/TpZdwJVSf-I/AAAAAAAABNs/a9rC1q8FHTU/s1600/ManagementTheater.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://2.bp.blogspot.com/-xy86K10fjDM/TpZdwJVSf-I/AAAAAAAABNs/a9rC1q8FHTU/s320/ManagementTheater.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-toI7kifOIYI/TopmWoAaPoI/AAAAAAAABNc/bfcgiQ0obG8/s1600/Screen+shot+2011-10-03+at+8.49.41+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;You&#39;ve probably been a witness to most of these. Just in case they&#39;re not obvious:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Begging&lt;/b&gt;: &lt;i&gt;&quot;Please, I just really need you to work harder to get this done. Just this one time.&quot;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Browbeating&lt;/b&gt;: &lt;i&gt;&quot;Stop your whining and get it done before I replace you with someone who gives a darn about their job!&quot;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Cheerleading&lt;/b&gt;: &lt;i&gt;&quot;I have faith in you, you&#39;re the best! Go Team!&quot;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Punative Reporting&lt;/b&gt;: &lt;i&gt;&quot;I want to see daily status reports! Twice daily!&quot;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Publicity Stunts&lt;/b&gt;: &lt;i&gt;&quot;I want every last one of us in this meeting. We need a show of force!&quot;&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;Such motivational tactics tend to be ineffective. To people struggling with difficult organizational and/or technical problems, emotional appeals seem to be a kind of buffoonery. Of course, if the team succeeds despite the management theater, it merely strengthens the causal connection in the manager&#39;s mind. By simply not failing, the team locks their manager into a pattern that ensures that all future crises will be met with emotional and ineffective responses.&lt;br /&gt;&lt;br /&gt;We should not be asking how to make managers behave. We should be asking what a team can do to ensure that a manager can provide effective servant leadership. Management theater is not a manager&#39;s first choice of action, but rather a tactic of last resource. When a manager does not have sufficient information or timely opportunity to be effective, she must use whatever ethical means remain. Management theater is, therefore, primarily a process smell not of management but of the development team.</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/1417761873496327007/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/10/management-theater.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1417761873496327007'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1417761873496327007'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/10/management-theater.html' title='Management Theater'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-xy86K10fjDM/TpZdwJVSf-I/AAAAAAAABNs/a9rC1q8FHTU/s72-c/ManagementTheater.png" height="72" width="72"/><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-6048875220923236741</id><published>2011-10-03T16:51:00.002-05:00</published><updated>2011-10-03T16:51:53.388-05:00</updated><title type='text'>Worldwide shortage</title><content type='html'>I&#39;m told that there are shortages of AgileInAFlash, some channels having projected waits of as much as two months for replenishment. &lt;br /&gt;&lt;br /&gt;You can still get AgileInAFlash physical decks at the Pragmatic Programmers site, and you can also pick up electronic copies there to tide you over. The electronic version is not as handy in mentoring settings, but is fine for reading or projecting. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/6048875220923236741/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/10/worldwide-shortage.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/6048875220923236741'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/6048875220923236741'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/10/worldwide-shortage.html' title='Worldwide shortage'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-5573387565476366140</id><published>2011-09-16T19:22:00.001-05:00</published><updated>2011-09-16T19:22:27.690-05:00</updated><title type='text'>Second Printing</title><content type='html'>Thanks to the demand of our readers, Agile In A Flash is going to its second printing only 8 months after its initial release. Thanks to all of you!</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/5573387565476366140/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/09/second-printing.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5573387565476366140'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5573387565476366140'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/09/second-printing.html' title='Second Printing'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-8613307441586378548</id><published>2011-06-10T07:23:00.002-05:00</published><updated>2011-06-10T07:23:11.889-05:00</updated><title type='text'>Mobile Version</title><content type='html'>Thanks to our hosts at blogger.com, we now have a mobile version, so accessing Agile In A Flash from your mobile device is finally easy and even pleasant.</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/8613307441586378548/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/06/mobile-version.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/8613307441586378548'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/8613307441586378548'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/06/mobile-version.html' title='Mobile Version'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-9135931845972037688</id><published>2011-05-29T21:07:00.002-05:00</published><updated>2011-05-29T21:48:58.999-05:00</updated><title type='text'>Doctor Dan&#39;s Prescription</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-taxiLT-6iCc/TeLwK-fzHXI/AAAAAAAAAlI/_G1NwOYw3R4/s1600/GeekDanIterationCard.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;456&quot; src=&quot;http://4.bp.blogspot.com/-taxiLT-6iCc/TeLwK-fzHXI/AAAAAAAAAlI/_G1NwOYw3R4/s640/GeekDanIterationCard.jpg&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;i&gt;&lt;a href=&quot;http://twitter.com/#!/geekdan/status/73913744027168769&quot;&gt;Dr Dan&#39;s Prescription:&lt;/a&gt; An Agile Flashcard a Day keeps the Fail away...&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;This photo of card #33 was received via twitter from Daniel Thomas (&lt;a href=&quot;http://twitter.com/#!/geekdan&quot;&gt;@geekdan&lt;/a&gt;) in Brisbane, Australia, complete with the quote above. &lt;br /&gt;&lt;br /&gt;I like how they have a low-tech &quot;frame&quot; for the cards, and a place of honor on the team whiteboard. I hope they get some help, humor, or inspiration from the &lt;a href=&quot;http://pragprog.com/titles/olag/agile-in-a-flash&quot;&gt;deck&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Dan tweets a lot of interesting links. Give him a follow.</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/9135931845972037688/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/05/dr-dans-prescription-agile-flashcard.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/9135931845972037688'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/9135931845972037688'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/05/dr-dans-prescription-agile-flashcard.html' title='Doctor Dan&#39;s Prescription'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-taxiLT-6iCc/TeLwK-fzHXI/AAAAAAAAAlI/_G1NwOYw3R4/s72-c/GeekDanIterationCard.jpg" height="72" width="72"/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-6173398126317840058</id><published>2011-05-25T11:28:00.001-05:00</published><updated>2011-05-25T11:39:04.458-05:00</updated><title type='text'>A Card-Enriched Workspace</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-8d_yc9LMKW8/Td0sEx0Jz9I/AAAAAAAAAlA/-jpEtbBsHh4/s1600/BuildAndDeployDesk.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;476&quot; src=&quot;http://1.bp.blogspot.com/-8d_yc9LMKW8/Td0sEx0Jz9I/AAAAAAAAAlA/-jpEtbBsHh4/s640/BuildAndDeployDesk.jpg&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;Friend of the blog &lt;a href=&quot;http://www.buildndeploy.com/&quot;&gt;Brian Kelly&lt;/a&gt; offers us a glimpse of his workspace. I notice that the books on organizational change are above the card on overcoming organizational obstinance, and that the rest are values and practices cards.&lt;br /&gt;&lt;br /&gt;The new website-only card, &lt;a href=&quot;http://agileinaflash.blogspot.com/2011/04/rules-for-distributed-teams.html&quot;&gt;Five Rules for Distributed Teams&lt;/a&gt;, is shown on the monitor. &amp;nbsp;It was released coincidentally with Lisa Crispin&amp;nbsp;and Nanda Lankalapalli&#39;s StickyMinds article on &lt;a href=&quot;http://www.stickyminds.com/BetterSoftware/magazine.asp?fn=cifea&quot;&gt;Tele-teams&lt;/a&gt;. I guess the distributed team meme is in the air.&lt;br /&gt;&lt;br /&gt;Brian is the fellow who has been posting the excellent near-daily meditations on the 52 cards of the official &lt;a href=&quot;http://pragprog.com/titles/olag/agile-in-a-flash&quot;&gt;Agile In A Flash&lt;/a&gt; deck released by Pragmatic Programmers in late January of this year.&lt;br /&gt;&lt;br /&gt;We are very proud, indeed.</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/6173398126317840058/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/05/friend-of-blog-brian-kelly-offers-us.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/6173398126317840058'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/6173398126317840058'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/05/friend-of-blog-brian-kelly-offers-us.html' title='A Card-Enriched Workspace'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-8d_yc9LMKW8/Td0sEx0Jz9I/AAAAAAAAAlA/-jpEtbBsHh4/s72-c/BuildAndDeployDesk.jpg" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-7068184870222039762</id><published>2011-05-24T15:14:00.001-05:00</published><updated>2011-05-24T15:15:24.386-05:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="agile"/><category scheme="http://www.blogger.com/atom/ns#" term="distributed"/><category scheme="http://www.blogger.com/atom/ns#" term="offshoring"/><category scheme="http://www.blogger.com/atom/ns#" term="outsourcing"/><category scheme="http://www.blogger.com/atom/ns#" term="pairing"/><category scheme="http://www.blogger.com/atom/ns#" term="remote"/><title type='text'>Rules for Distributed Teams</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-jIcAaKceDIk/TdwRexdzMGI/AAAAAAAAAk4/BA5KBwb8ntg/s1600/Screen+shot+2011-05-24+at+3.12.41+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;380&quot; src=&quot;http://3.bp.blogspot.com/-jIcAaKceDIk/TdwRexdzMGI/AAAAAAAAAk4/BA5KBwb8ntg/s640/Screen+shot+2011-05-24+at+3.12.41+PM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As the &lt;i&gt;Greatest Agile-In-A-Flash Card Wielding Coaches So Far&lt;sup&gt;(tm)&lt;/sup&gt;&lt;/i&gt;, we&#39;re often asked for advice (or drawn into arguments) about how to make agile work with distributed teams. Sometimes it&#39;s for more humble reasons, though: We&#39;ve both been remote members of a team, pair-programming with peers daily. We prescribe the following rules for distributed development:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Don&#39;t.&lt;/b&gt; Traditional organizations should avoid the extra strain, trouble, and expense of remote members without a significant reason. For example, building a better team using remote rockstars might provide some justification, but you might also be better off with a capable, local team that works well together. It&#39;s often out of your control, though, and in the hands of a really big boss, bean counter, or entrenched culture. You can make it work: Virtual organizations, startups, and the like find great success using virtual tools, pairing, and non-traditional communication pathways. &lt;em&gt;Make sure you really mean it&lt;/em&gt;, because it&#39;s not a trouble-free add-on to the way your large organization does things now.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Don&#39;t treat remotes as if they were local.&lt;/b&gt; Treat your &quot;satellite&quot; developers as competent people with physical limitations. A remote is visually impaired, since he can only see through a web cam, and only when it is on. He cannot see the kanban board, the other side of the camera, and so on. Likewise, he only hears what is said into the microphone and not at all if simultaneous conversations occur. A remote cannot cross the room and talk to people, so interoffice chat (Skype, Jabber, etc) is essential. The local team has to make concessions, repeat conversations, and be the eyes and ears of the remote employees. &lt;em&gt;Do not treat unequal things as equal--accept that there are compromises.&lt;/em&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Don&#39;t treat locals as if they were remote.&lt;/b&gt; You certainly can install electronic kanban boards, online agile project management tools, instant messaging, cameras, email, and shared document management so that every local can sit alone in a cubicle or office and behave just like a remote employee. Rather than being empowered, you are all equally limited (see point #2). &lt;em&gt;Never limit so that all are equal. Allow all to rise to greatness.&lt;/em&gt; The power of people working closely together in teams is significant (see first bullet above).&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Latitude hurts, but longitude kills.&lt;/b&gt; Just being remote hurts (see first two bullets), but the complications can be overcome when employees share the same time zone and working hours. The further you move the team across time zones, the fewer common hours they have, and the longer any kind of communication takes to make a round-trip. Agile is predicated on short feedback loops, so 24-hour turn-around is out of the question. &lt;em&gt;If you can&#39;t be a single team that works together, create separate agile teams.&lt;/em&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-weight: normal;&quot;&gt;&lt;b&gt;Don&#39;t always be remote&lt;/b&gt;&lt;/span&gt;.&lt;/b&gt; Begin your engagement with a nice long on-site visit. A week is barely enough. Two weeks starts to make it work. Visiting for one week a quarter or even a week a month can keep a feeling of partnership alive. Dealing with difficulties is easy among people who know and respect each other. While constant telepresence (Skype, Twitter, IM, etc.) can minimize the problem of &quot;out-of-sight, out of mind,&quot; studies show that &lt;em&gt;distributed team success requires teams with strong interpersonal relationships, built best on face-to-face interaction&lt;/em&gt;. The bean counters may not be able to comprehend it, but the investment is well worth the return.&lt;/li&gt;&lt;/ol&gt;&lt;i&gt;Tim:&lt;/i&gt; Would I remote again? In fact, I do most of my Industrial Logic work remote. We are in constant touch with each other and pair frequently. I converse with Joshua Kerievsky more in the course of a week than I have any other &quot;boss&quot; (he&#39;ll hate that I used that word!) in my employment history. We even work across time zones. We would work more fluently and frequently side-by-side, but we&#39;d probably not get to work together if we all had to relocate. It is a compromise that has surprisingly good return on investment for us. We also have the advantage that we are all mature agilists; it would be very hard for first-timers. It&#39;s hard for me, as I have a tendency to &quot;go dark&quot; sometimes.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;i&gt;Jeff:&lt;/i&gt; I enjoyed a year of remote development with a now-defunct company one time zone to the east. Pairing saved it for me. The ability to program daily in (virtually) close quarters with another sharp someone on the team helped me keep an essential connection with them. On the flip side, however, I never felt like I was a true part of that team. I missed out on key conversations away from the camera, and I felt that debating things over the phone was intensely ineffective. You do what you must, but I&#39;d prefer to not be remote again.</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/7068184870222039762/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/04/rules-for-distributed-teams.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/7068184870222039762'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/7068184870222039762'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/04/rules-for-distributed-teams.html' title='Rules for Distributed Teams'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-jIcAaKceDIk/TdwRexdzMGI/AAAAAAAAAk4/BA5KBwb8ntg/s72-c/Screen+shot+2011-05-24+at+3.12.41+PM.png" height="72" width="72"/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-8429661093117834039</id><published>2011-03-22T10:18:00.002-05:00</published><updated>2011-03-28T10:25:58.917-05:00</updated><title type='text'>Card-Carrying Agile Team</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-8cbJXsHfpBM/TYi5CmF-mWI/AAAAAAAAAfI/D_xiRNPVcg0/s1600/GeoLearning.JPG&quot; imageanchor=&quot;1&quot; style=&quot;clear:left; float:right;margin-left:1em; margin-bottom:1em&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;214&quot; width=&quot;320&quot; src=&quot;http://3.bp.blogspot.com/-8cbJXsHfpBM/TYi5CmF-mWI/AAAAAAAAAfI/D_xiRNPVcg0/s320/GeoLearning.JPG&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-size: 70%;&quot;&gt;&lt;br /&gt;Top row: Chris Freeman, George Sparks, Sudheer Pinna, Scott Splavec, Sreehari Mogallapalli, Matt Poush.&lt;br /&gt;Bottom row: Toran Billups, Ryan Bergman, Andrea de Freitas, and Benoy John&lt;br /&gt;Photographer: Vadim Suvorov&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;p&gt;Say hello to the team from Sum Total. Back before acquisition, the company was known as GeoLearning, and Tim was one of the coaches to help with their transition to Agile methods. Later, while working on Agile In A Flash, Jeff and Tim were both employed as remote pair-programming team members. The team has done some remarkable things in just the past three years. &lt;/p&gt;&lt;p&gt;Vadim (an excellent developer, brilliant guy, friend) reminds me that he is present in this photo as a reflection in the eyes of all the developers who are standing in front of the camera. If this were a TV detective show, you could zoom in and see him clearly.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/8429661093117834039/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/card-carrying-agile-team.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/8429661093117834039'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/8429661093117834039'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/card-carrying-agile-team.html' title='Card-Carrying Agile Team'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-8cbJXsHfpBM/TYi5CmF-mWI/AAAAAAAAAfI/D_xiRNPVcg0/s72-c/GeoLearning.JPG" height="72" width="72"/><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-7465489333417395787</id><published>2011-03-22T09:56:00.001-05:00</published><updated>2011-03-22T09:56:26.200-05:00</updated><title type='text'>Card-Carrying Scrum Master</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-a739yBJ5dlI/TYi2eZKhgqI/AAAAAAAAAfA/DJ__SdSqOH8/s1600/DionNicolaas.jpeg&quot; imageanchor=&quot;1&quot; style=&quot;clear:left; float:left;margin-right:1em; margin-bottom:1em&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;166&quot; width=&quot;208&quot; src=&quot;http://1.bp.blogspot.com/-a739yBJ5dlI/TYi2eZKhgqI/AAAAAAAAAfA/DJ__SdSqOH8/s320/DionNicolaas.jpeg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Dion Nicolaas (not pictured) displays the Agile in a Flash cards on his desk in the TomTom headquarters in Amsterdam, the Netherlands. Showing a different card each day, he has inspired some colleagues to order their own decks!</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/7465489333417395787/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/card-carrying-scrum-master.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/7465489333417395787'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/7465489333417395787'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/card-carrying-scrum-master.html' title='Card-Carrying Scrum Master'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-a739yBJ5dlI/TYi2eZKhgqI/AAAAAAAAAfA/DJ__SdSqOH8/s72-c/DionNicolaas.jpeg" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-1753931043564005845</id><published>2011-03-18T22:05:00.000-05:00</published><updated>2011-03-18T22:05:24.612-05:00</updated><title type='text'>Daily Meditations</title><content type='html'>On twitter, follow &quot;buildndeploy&quot; (&lt;a href=&quot;http://buildndeploy.wordpress.com/&quot;&gt;Brian Kelly&lt;/a&gt;) for a daily meditation on Agile In A Flash. Well, mostly daily. He has a day job, and we certainly forgive a missed day. Brian is going through a card a day (when possible) and providing an 140char summary of his thoughts. Follow along by card number (use this &lt;a href=&quot;http://agileinaflash.blogspot.com/2011/02/agile-in-flash-card-index_23.html&quot;&gt;index&lt;/a&gt;, or &lt;a href=&quot;http://www.pragprog.com/titles/olag/agile-in-a-flash&quot;&gt;your own deck&lt;/a&gt;) and see what buildndeploy has to say.&lt;br /&gt;&lt;br /&gt;Brian is using our hashtag #agileinaflash, so it is easy to catch up with his prior reflections.</content><link rel="related" href="http://twitter.com/#!/buildndeploy" title="Daily Meditations"/><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/1753931043564005845/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/daily-meditations.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1753931043564005845'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1753931043564005845'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/daily-meditations.html' title='Daily Meditations'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-1032153589087680434</id><published>2011-03-18T21:58:00.000-05:00</published><updated>2011-03-18T21:58:41.699-05:00</updated><title type='text'>Getting Better (guest blog post)</title><content type='html'>Today we have a short article from our guest blogger &lt;a href=&quot;http://johnnosnose.blogspot.com/&quot;&gt;Johnno Nolan&lt;/a&gt;, who caught our attention in twitter when he said:&lt;br /&gt;&lt;blockquote&gt;Great 2 hear the team talking soft dev. We go through an Agile in a Flash card every am and critique. Can feel devs caring again&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;Johnno Nolan&#39;s story is still in progress, but I felt that tweet was inspirational enough that I invited him to provide a short blog post, and he kindly submitted the following story.&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;I&#39;ve worked here before. We developed with chaos. I left. They persuaded me to come back. They said it would be different. &quot;We can do things a different way. Your way&quot; they said. The chaos would be mine to tame. I accepted and returned.&lt;br /&gt;&lt;br /&gt;The cold reality set in. The team was demotivated, resigned to the current system. Worse, we&#39;d tried to implement &#39;Getting Better&#39; before (I don&#39;t like to use the term Agile) but we&#39;d lack courage and when the main change driver had gone, adoption fell by the wayside. There was mistrust, ignorance of doing things that way and then the team was asked to pick back up where they left off. So there&#39;s a been an open dialogue of what&#39;s been wrong and we&#39;ve been focusing on the basics to &#39;Get Better&#39;.&lt;br /&gt;&lt;br /&gt;And we are.&lt;br /&gt;&lt;br /&gt;I can look back a couple of months and we were not talking, not thinking, just accepting of the norm. Now we&#39;re learning together. Sometimes we have bad days, but today was a good one.&lt;br /&gt;&lt;br /&gt;Before our stand-ups meetings we talk about one Agile In A Flash card. They say story cards are a placeholder for a conversation and that&#39;s exactly how we use them. We don&#39;t always agree with the card but we talk about it and try and understand. The cards provide a focal point.&lt;br /&gt;&lt;br /&gt;Today was really productive, we finished more than we expected. We passed stories back because we didn&#39;t think they were good enough. We talked about design. We returned to the cards and talked more about process. For the first time in months we cared and we&#39;re proud of what we are doing.&lt;br /&gt;&lt;br /&gt;We&#39;re not becoming Agile in a Flash but we&#39;re Getting Better Steadily.&lt;/blockquote&gt;&lt;br /&gt;Jeff and I are receiving several stories every week about how Agile In A Flash is helping teams re-engage with fundamentals. We&#39;ll be entertaining other guest bloggers in the future, in addition to providing some fresh content every month.</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/1032153589087680434/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/getting-better-guest-blog-post.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1032153589087680434'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/1032153589087680434'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/getting-better-guest-blog-post.html' title='Getting Better (guest blog post)'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-6740805821311857127</id><published>2011-03-15T22:39:00.000-05:00</published><updated>2011-03-15T22:39:41.158-05:00</updated><title type='text'>Card-Carrying Network Weaver</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-SK2wWRh10AE/TYAval01UqI/AAAAAAAAAds/cfZaxiHh3MQ/s1600/IMG_0023.JPG&quot; imageanchor=&quot;1&quot; style=&quot;clear:left; float:left;margin-right:1em; margin-bottom:1em&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; width=&quot;320&quot; src=&quot;http://2.bp.blogspot.com/-SK2wWRh10AE/TYAval01UqI/AAAAAAAAAds/cfZaxiHh3MQ/s320/IMG_0023.JPG&quot; /&gt;&lt;/a&gt;&lt;/div&gt;A welcome to &lt;a href=&quot;http://patrickwilsonwelsh.com/&quot;&gt;Patrick Wilson-Welsh&lt;/a&gt;, seen enjoying his new deck of Agile In A Flash cards at the &lt;a href=&quot;http://agileandbeyond.org/&quot;&gt;Agile And Beyond&lt;/a&gt; gathering in Dearborn, Michigan, where I dare say we had the most interesting table full of people in the entire room. Patrick really wanted these cards. Let us know how they&#39;re working out for you!</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/6740805821311857127/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/card-carrying-network-weaver.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/6740805821311857127'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/6740805821311857127'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/card-carrying-network-weaver.html' title='Card-Carrying Network Weaver'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-SK2wWRh10AE/TYAval01UqI/AAAAAAAAAds/cfZaxiHh3MQ/s72-c/IMG_0023.JPG" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1697388841986104302.post-5265416454983743526</id><published>2011-03-10T14:24:00.002-06:00</published><updated>2011-03-10T14:31:35.486-06:00</updated><title type='text'>Card-carrying Agile Tester</title><content type='html'>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-9vf1Mpk6ek0/TXkyfzF4FiI/AAAAAAAAAdg/cDhtbXOQz_A/s1600/CardCarrying-Crispin.jpg&quot; imageanchor=&quot;1&quot; style=&quot;clear:left; float:left;margin-right:1em; margin-bottom:1em&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;239&quot; width=&quot;320&quot; src=&quot;http://3.bp.blogspot.com/-9vf1Mpk6ek0/TXkyfzF4FiI/AAAAAAAAAdg/cDhtbXOQz_A/s320/CardCarrying-Crispin.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This is &lt;a href=&quot;http://lisacrispin.com/wordpress/&quot;&gt;Lisa Crispin&lt;/a&gt;, brilliant Agile tester and &lt;a href=&quot;http://lisacrispin.com/wordpress/agile-testing-book-is-now-out/&quot;&gt;author&lt;/a&gt;, trainer, and early adopter of Agile In A Flash. Here you see her sharing deep testing insights with Jo, Edgar and Chester.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size:60%;&quot;&gt;No animals were harmed or insulted in the making of this blog post.&lt;/span&gt;</content><link rel='replies' type='application/atom+xml' href='http://agileinaflash.blogspot.com/feeds/5265416454983743526/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/card-carrying-agile-tester.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5265416454983743526'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1697388841986104302/posts/default/5265416454983743526'/><link rel='alternate' type='text/html' href='http://agileinaflash.blogspot.com/2011/03/card-carrying-agile-tester.html' title='Card-carrying Agile Tester'/><author><name>Agileotter</name><uri>http://www.blogger.com/profile/10773578598860454277</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-9vf1Mpk6ek0/TXkyfzF4FiI/AAAAAAAAAdg/cDhtbXOQz_A/s72-c/CardCarrying-Crispin.jpg" height="72" width="72"/><thr:total>0</thr:total></entry></feed>